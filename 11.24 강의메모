CPP_app.pdf 11page

stat directory or file

파일내용해석 :

stat — stat() 결과 해석하기

tat.ST_MODE
아이 노드(inode) 보호 모드.

stat.ST_INO
아이 노드(inode) 번호.

stat.ST_UID
소유자의 사용자 id.

stat.ST_SIZE
일반 파일의 크기(바이트); 일부 특수 파일에서는 대기중인 데이터의 양.

stat.ST_ATIME
마지막 액세스 시간.

stat.ST_MTIME
마지막 수정 시간.

stat.ST_CTIME
운영 체제에서 보고한 《ctime》. (유닉스와 같은) 일부 시스템에서는 마지막 메타 데이터 변경 시간이고, (윈도우와 같은) 다른 시스템에서는 생성 시간입니다 (자세한 내용은 플랫폼 설명서를 참조하십시오).

《파일 크기》의 해석은 파일 유형에 따라 달라집니다. 일반 파일에서는 바이트로 표현한 파일의 크기입니다. 대부분의 유닉스(특히 리눅스를 포함하는)의 FIFO와 소켓에서, 《크기》는 os.stat(), os.fstat() 또는 os.lstat()를 호출한 시점에 읽기 대기 중인 바이트 수입니다; 이것은 때때로, 특히 비 블로킹으로 연 후에 이러한 특수 파일 중 하나를 폴링할 때 유용할 수 있습니다. 다른 문자와 블록 장치에서 크기 필드의 의미는 하부 시스템 호출의 구현에 따라 더 다양합니다.

아래의 변수는 ST_MODE 필드에서 사용되는 플래그를 정의합니다.

첫 번째 플래그 집합을 사용하는 것보다 위의 함수를 사용하는 것이 더 이식성 있습니다:

-------------------------------------------------------------------------------

ComputerSystem.pdf  24page

Try - Manage Disk
USB 꽂고 실습하는내용

난 USB가 없어서 핸드폰 꽂고 함

터미널창에서 실행

df -h > sudo fdisk -l > fdisk /dev/sda1 (pdf에는 sdb인데 휴대폰이라 없었음) > Command (m for help) : m 나옴

오강사님왈 : 3가지만 알면된다 d, F, n

-------------------------------------------------------------------------------

Read directory

c++ ReadDir.c -o ReadDir

./ReadDir / : root 폴더 읽기

./ReadDir . : 현재 폴더 읽기

man readdir : readdir의 커맨드 나옴

-------------------------------------------------------------------------------

JetBot AI Kit

Download JetBot image which is provided by NVIDIA and unzip it. Click here to download it       //다운

JetPack SDK

For Jetson Nano 2GB Developer Kit:                                                  // 다운

리눅스에서는 파일을 다운받는다고 끝나는게 아니다

mount   :   장치와 리눅스 커널 인식 경로 설정.

-------------------------------------------------------------------------------

Kernel

~$ uname -r : 커널 정보

~$ uname -a : os 능력

구조 사진 참고!

-------------------------------------------------------------------------------

Kernel - Wake up Computer(Linux) 

OS가 켜지는 순서

-------------------------------------------------------------------------------

Run Level(Linux)

~$ init 6 : 하면 재부팅

~$ reboot : 하면 재부팅                 위 와 아래는 고전과 현대 차이

~$ who -r : # check up current Run Level

~$ init 숫자 : 단계별로 기능 구현

-------------------------------------------------------------------------------

File Descriptor : 설명~

-------------------------------------------------------------------------------

Try - File Descriptor - xinput

xinput 설치

~$ sudo apt install xinput

~$ xinput --list            : list 나옴

~$ xinput --test 10
key release 36 

-------------------------------------------------------------------------------

Files and Streams

~$ Fstreams.CPP_app

https://docs.google.com/document/d/1zjNS2Dr3wsbxy2879hGJ_IvROpK96TgXkLLJBVpybkc/edit                //구글공유문서에 있음

#include <iostream>
#include <fstream>

using namespace std;

int main()
{
    string filename = "fstream.txt";
    ofstream outfstream(filename);
    string data;
    if (outfstream.is_open())
    {
        outfstream << "This is a line." << endl;
        cout << "Write data";
        cin >> data;
        outfstream << data << endl;
        outfstream.close();
    }
    else
        cout << "Unable to open file";
    ifstream infstream(filename);
    if (infstream.is_open())
    {
        while (getline(infstream, data))
        {
            cout << data << '\n';
        }
    }
    return 0;
}

-------------------------------------------------------------------------------

icar 조립 16:00pm 경